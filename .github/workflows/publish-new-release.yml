name: "Publish new release"

on:
  pull_request:
    branches:
      - main
    types:
      - closed

permissions:
      id-token: write
      contents: write
      pull-requests: write

jobs:
 deploy-databricks:
    name: "Deploy Databricks Assets to PROD"
    environment: PROD
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true &&
      (startsWith(github.event.pull_request.head.ref, 'release/') || startsWith(github.event.pull_request.head.ref, 'hotfix/'))

    steps:
      - name: Checkout code
        if: success()
        uses: actions/checkout@v4
      
      
      - name: Install Databricks CLI
        if: success()
        uses: databricks/setup-cli@main

      - name: Deploy the bundle
        if: success()
        run: databricks bundle deploy -t prod
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST_URL }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_SP_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_SP_SECRET }}
  
 release:
    needs: deploy-databricks
    runs-on: ubuntu-latest   
    steps:
      - name: Checkout code
        if: success()
        uses: actions/checkout@v4  
        

      - name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create Release
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          tag_name: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false

      - name: Check if main is ahead of develop
        run: |
          git fetch origin develop
          BEHIND=$(git rev-list --left-right --count origin/main...origin/develop | awk '{print $2}')
          if [ "$BEHIND" -gt 0 ]; then
            echo "MAIN_AHEAD=true" >> $GITHUB_ENV
          else
            echo "MAIN_AHEAD=false" >> $GITHUB_ENV
          fi

      - name: Merge main into develop branch (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/') && env.MAIN_AHEAD == 'true'
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: main
          base: develop
          title: Merge main into develop branch
          body: |
            This PR merges the main branch back into develop.
            This ensures that the updates that happened on the release branch are also present on the develop branch.

      - name: Merge main into develop branch  (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: main
          base: develop
          title: Merge main into develop branch
          body: |
            This PR merges the main branch back into develop.
            This ensures that the updates that happened on the hotfix branch are also present on the develop branch.
